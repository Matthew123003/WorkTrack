To run your project, navigate to the directory and run one of the following npm commands.

- cd WorkTrack
- npm run android
- npm run ios
- npm run web

After creating new expo project with standard setup
Make a metro.config.js file and make sure you arent watching the node modules folder
Then make sure the react native / expo dev dependencies are installed and
showing on the package.json file
The run npx expo prebuild to make sure that the android and ios folders are created to
initialize the project correctly
Then run npx expo run:android to start everything running and indexing and
executing and building

Still giving some errors on emulator, will check fixes and options.
************************************************************************************
WorkTrack/WorkTrackFrontEnd/WorkTrack/
├── .expo/                                # Expo's internal configuration and build files
├── android/                              # Android-specific files for Expo (native Android app)
├── app/                                  # Core application screens and layout components
│   ├── _layout.tsx                       # Main layout file that sets up routing and context providers
│   ├── (auth)/                           # Folder for authentication-related screens
│   │   └── login.tsx                     # Login screen for user authentication
│   └── (tabs)/                           # Folder for main app screens after login
│       └── index.tsx                     # Main screen or dashboard shown after user login
├── assets/                               # Static assets like images, icons, fonts
│   └── (various assets like images, icons, fonts, etc.)
├── components/                           # Reusable UI components
│   └── (various UI components like buttons, headers, form elements, etc.)
├── constants/                            # Project constants like API URLs, color themes, etc.
│   └── (various constants like colors, API endpoints, etc.)
├── context/                              # Contexts for managing global state (e.g., login state)
│   └── LoginContext.tsx                  # Manages login state across the app (isLoggedIn, setIsLoggedIn)
├── hooks/                                # Custom React hooks for reusability
│   └── (various hooks for app logic like useLogin, etc.)
├── scripts/                              # Utility scripts for development, testing, or setup
│   └── (various scripts like build, deployment, etc.)
├── node_modules/                         # Project dependencies managed by npm/yarn
├── package.json                          # Project's dependencies and scripts configuration
├── app.json                              # Expo configuration file (app settings like name, splash screen, etc.)
└── (other files for configuration and setup)
******************************************************************************************