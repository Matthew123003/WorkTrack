To run your project, navigate to the directory and run one of the following npm commands.

- cd WorkTrack
- npm run android
- npm run ios
- npm run web

After creating new expo project with standard setup
Make a metro.config.js file and make sure you arent watching the node modules folder
Then make sure the react native / expo dev dependencies are installed and
showing on the package.json file
The run npx expo prebuild to make sure that the android and ios folders are created to
initialize the project correctly
Then run npx expo run:android to start everything running and indexing and
executing and building

Still giving some errors on emulator, will check fixes and options.
************************************************************************************
WorkTrack FrontEnd Project Structure

WorkTrack (Root Directory)
├── .expo                         # Expo configuration directory
├── android                       # Android-specific files (Expo Ejected Projects)
├── app                           # Main application directory
│   ├── (auth)                    # Authentication-specific screens
│   │   ├── _layout.tsx          # Layout file for auth screens
│   │   ├── login.tsx            # Login screen
│   │   ├── signUp.tsx           # Sign-up screen
│   ├── (tabs)                    # Tab-specific screens (main app navigation)
│   │   ├── _layout.tsx          # Layout file for tab screens
│   │   ├── interviews.tsx       # Interviews screen
│   │   ├── jobs.tsx             # Jobs screen
│   │   ├── profile.tsx          # Profile screen
│   │   ├── settings.tsx         # Settings screen
│   ├── _layout.tsx              # Root layout for the application
│   ├── +html.tsx                # Custom HTML handler for the app
│   ├── +not-found.tsx           # Not Found handler for unmatched routes
│   ├── index.tsx                # Home or default entry screen
├── assets                        # Static assets (images, fonts, etc.)
├── components                    # Reusable React components
├── constants                     # Application constants and config values
├── context                       # Context API files for global state management
│   ├── LoginContext.tsx         # Login state context
├── hooks                         # Custom React hooks
├── node_modules                  # Node.js dependencies
├── scripts                       # Utility and automation scripts
├── app.json                      # Expo project configuration, APP ICON
├── babel.config.js               # Babel configuration for JavaScript/TypeScript
├── eas.json                      # Expo Application Services (EAS) config file
├── package-lock.json             # Lockfile for npm dependencies
├── package.json                  # npm project configuration
├── tsconfig.json                 # TypeScript configuration file
******************************************************************
WorkTrack
|
├── .expo/
|
├── android/
|
├── app/
|   |
|   ├── (auth)/
|   |   |
|   |   ├── _layout.tsx
|   |   └── login.tsx
|   |   └── signUp.tsx
|   |
|   ├── (tabs)/
|   |   |
|   |   ├── _layout.tsx
|   |   ├── home.tsx
|   |   ├── interviews.tsx
|   |   ├── jobs.tsx
|   |   ├── profile.tsx
|   |   └── settings.tsx
|   |
|   ├── _layout.tsx
|   ├── +html.tsx
|   ├── +not-found.tsx
|   └── index.tsx
|
├── assets/
├── components/
├── constants/
├── context/
|   └── LoginContext.tsx
├── hooks/
├── node_modules/
├── scripts/
├── app.json
├── babel.config.js
├── eas.json
├── package-lock.json
├── package.json
└── tsconfig.json

******************************************************************
Based on the behavior you're describing, the issue is likely related
 to how your AuthLayout component is structured. In an Expo Router 
 project, _layout.tsx acts as a layout file for the routes nested 
 under its directory, providing a common layout for all child routes.
  If the layout isn't configured to render the child screens, it will
   only display the content of the layout file itself (e.g.,
    "AuthLayout" in this case).
********************************************************************
If you are looking to create a development build locally, rather
 than remotely on EAS, you can create local builds with
  npx expo run:[android|ios] or with eas build --local.
********************************************************************
Using expo modules
  - expo-asset (10.0.10)
  - expo-constants (16.0.2)
  - expo-dev-client (4.0.27)
  - expo-dev-launcher (4.0.27)
  - expo-dev-menu (5.0.21)
  - expo-file-system (17.0.1)
  - expo-font (12.0.10)
  - expo-json-utils (0.13.1)
  - expo-keep-awake (13.0.2)
  - expo-manifests (0.14.3)
  - expo-modules-core (1.12.24)
  - expo-splash-screen (0.27.6)
  - expo-system-ui (3.0.7)
  - expo-web-browser (13.0.3)
*********************************************************************
eas build --platform android
